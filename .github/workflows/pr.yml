name: deploy blog-pr.dev.xuexb.com

on:
  pull_request_target:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: source
      - name: Merge PR
        run: |
          rm -rf source/.github/workflows
          cp -r source/* .
          rm -rf source
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.PERSONAL_ACCESS_RW_NAME }}
          password: ${{ secrets.PERSONAL_ACCESS_RW_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Update Nginx Dockerfile path
        run: |
          a=xuexb/blog:node-latest
          b=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:node-${{ steps.meta.outputs.version }}
          sed -i "s?$a?$b?g" docker/Dockerfile.nginx
          cat docker/Dockerfile.nginx
      - name: Update ENV
        id: update-env
        run: |
          echo "::set-output name=domain::blog-${{ steps.meta.outputs.version }}.dev.xuexb.com"
      - name: Build Node.js Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:node-${{ steps.meta.outputs.version }}
      - name: Build Nginx Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/Dockerfile.nginx
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nginx-${{ steps.meta.outputs.version }}
      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            node_container_name="${{ steps.update-env.outputs.domain }}-node"
            node_image="${{ secrets.GHCR_MIRROR }}/${{ env.IMAGE_NAME }}:node-${{ steps.meta.outputs.version }}"
            nginx_container_name="${{ steps.update-env.outputs.domain }}-nginx"
            nginx_image="${{ secrets.GHCR_MIRROR }}/${{ env.IMAGE_NAME }}:nginx-${{ steps.meta.outputs.version }}"
            docker pull $node_image
            docker pull $nginx_image
            docker ps -aq --filter "name=$node_container_name" | xargs docker rm -f || echo "Delete fail"
            docker ps -aq --filter "name=$nginx_container_name" | xargs docker rm -f || echo "Delete fail"
            docker run \
              --env BLOG_ENV="`hostname`" \
              --env DB_HOST="${{ secrets.DB_HOST }}" \
              --env DB_PORT=${{ secrets.DB_PORT }} \
              --env DB_DATABASE=${{ secrets.DB_DATABASE }} \
              --env DB_USER=${{ secrets.DB_USER }} \
              --env DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              --env DB_PREFIX=${{ secrets.DB_PREFIX }} \
              --name $node_container_name \
              -d \
              $node_image
            docker run \
              --env BLOG_ENV="`hostname`" \
              -p 8080 \
              --name $nginx_container_name \
              --link $node_container_name:blog \
              -d \
              $nginx_image
            IFS="-"
            string=$(docker ps --filter "name=$nginx_container_name" --format "{{.Ports}}")
            array=($string)
            IFS=":"
            array=(${array[0]})
            port=${array[1]}
            if [ "$port" == "" ]; then exit 11; fi
            server="[{\"address\":\"${{ secrets.SSH_HOST }}\",\"port\":$port}]"
            timeout=6
            dyupsdata="{\"server\":$server,\"timeout\":$timeout}"
            dyupsurl="${{ secrets.DYUPS_SERVER }}/api/${{ steps.update-env.outputs.domain }}?r=$RANDOM"
            dyups_result=""
            for((i=1;i<=5;i++)); do
              httpcode=$(curl -sL -w '%{http_code}' -H 'x-dyups-token: ${{ secrets.DYUPS_TOKEN }}' -X POST -d "$postdata" $dyupsurl -o /dev/null)
              if [ "$httpcode" != "200" ]; then
                echo "注册 dyups 失败，响应码：$httpcode ，继续尝试"
                dyups_result="0"
              else
                echo "注册 dyups 成功"
                dyups_result="1"
                break
              fi
            done
            if [ "$dyups_result" == "0" ]; then
              echo "尝试了5次，最终还是失败，我也没办法"
              exit 12
            fi
      - uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `**Welcome**, The deployment is successful, please visit <https://${{ steps.update-env.outputs.domain }}> .✨`
            })