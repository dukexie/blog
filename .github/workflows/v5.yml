name: deploy v5.xuexb.com

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOMAIN: v5.xuexb.com
  DOMAIN_PORT: 8005

jobs:
  build-v5:
    runs-on: ubuntu-latest
    environment: prd
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.PERSONAL_ACCESS_RW_NAME }}
          password: ${{ secrets.PERSONAL_ACCESS_RW_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Update Nginx Dockerfile path
        run: |
          a=xuexb/blog:node-latest
          b=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:node-${{ steps.meta.outputs.version }}
          sed -i "s?$a?$b?g" docker/Dockerfile.nginx
          cat docker/Dockerfile.nginx
      - name: Build Node.js Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:node-${{ steps.meta.outputs.version }}
      - name: Build Nginx Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/Dockerfile.nginx
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nginx-${{ steps.meta.outputs.version }}
  deploy-v5:
    runs-on: ubuntu-latest
    environment: prd
    needs: build-v5
    if: ${{ needs.build-v5.result == 'success' }}
    steps:
      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          debug: false
          script: |
            node_container_name="${{ env.DOMAIN }}-${{ env.DOMAIN_PORT }}-node"
            node_image="${{ secrets.GHCR_MIRROR }}/${{ env.IMAGE_NAME }}:node-${{ needs.build-v5.outputs.version }}"
            nginx_container_name="${{ env.DOMAIN }}-${{ env.DOMAIN_PORT }}-nginx"
            nginx_image="${{ secrets.GHCR_MIRROR }}/${{ env.IMAGE_NAME }}:nginx-${{ needs.build-v5.outputs.version }}"
            docker pull $node_image \
              && docker pull $nginx_image \
              && docker ps -aq --filter "name=$node_container_name" | xargs docker rm -f || echo "Delete fail" \
              && docker ps -aq --filter "name=$nginx_container_name" | xargs docker rm -f || echo "Delete fail" \
              && docker run \
                --env BLOG_ENV="`hostname`" \
                --env DB_HOST="${{ secrets.DB_HOST }}" \
                --env DB_PORT=${{ secrets.DB_PORT }} \
                --env DB_DATABASE=${{ secrets.DB_DATABASE }} \
                --env DB_USER=${{ secrets.DB_USER }} \
                --env DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                --env DB_PREFIX=${{ secrets.DB_PREFIX }} \
                --name $node_container_name \
                -d \
                $node_image \
              && docker run \
                --env BLOG_ENV="`hostname`" \
                -p ${{ env.DOMAIN_PORT }}:8080 \
                --name $nginx_container_name \
                --link $node_container_name:blog \
                -d \
                $nginx_image
